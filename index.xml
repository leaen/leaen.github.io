<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Moss&#39; Blog</title>
    <link>http://banay.me/</link>
    <description>Recent content on Moss&#39; Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 26 Feb 2019 11:48:00 +1100</lastBuildDate>
    
	<atom:link href="http://banay.me/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Auto-regressive time series in R</title>
      <link>http://banay.me/post/ar-one-model/</link>
      <pubDate>Tue, 26 Feb 2019 11:48:00 +1100</pubDate>
      
      <guid>http://banay.me/post/ar-one-model/</guid>
      <description>Introduction In this post we&amp;rsquo;ll go over auto-regressive time series. What they are, what they look like, the properties they exhibit and some popular extensions. Throughout the post we&amp;rsquo;ll use small snippets of R to plot and fit various processes and models.
What are autoregressive time series? An auto-regressive time series is a stochastic process in which future values are modelled by a linear combination of some number of previous values of the same process.</description>
    </item>
    
    <item>
      <title>Hyperparameter selection with T-tests</title>
      <link>http://banay.me/post/hyperparameter-t-test/</link>
      <pubDate>Sun, 11 Nov 2018 19:14:00 +1100</pubDate>
      
      <guid>http://banay.me/post/hyperparameter-t-test/</guid>
      <description>Introduction One of the most important steps in developing a model for machine learning is tuning hyperparameters to ensure it generalises to unseen data. A model that fits the training set well but performs poorly on anything else is useless, so care should be taken in ensuring that in-sample performance characteristics of a model are representative of real world performance also. The most simple of these methods is of course using a holdout set, which allows for an easy way to estimate performance on out-sample data but when used as part of the model iteration process, is usually is also overfit to some degree.</description>
    </item>
    
    <item>
      <title>Fast keyword matching with the Aho-Corasick algorithm</title>
      <link>http://banay.me/post/aho-corasick/</link>
      <pubDate>Wed, 22 Aug 2018 19:20:00 +1000</pubDate>
      
      <guid>http://banay.me/post/aho-corasick/</guid>
      <description>Introduction In this post we&amp;rsquo;ll look at the problem of keyword matching including a number of approaches, applications and the Aho-Corasick algorithm.
Statement of problem To begin, let&amp;rsquo;s define the keyword searching problem.
Given a list of strings \(K = [s_1, \ldots, s_n]\) (called keywords) and a (usually) much longer string \(C\) (called the corpus) count the number of times each keyword appears in the corpus.
Let \(|s_i|\) be the length of the \(i\) - th keyword and let \(m\) be the length of the corpus \(C\).</description>
    </item>
    
  </channel>
</rss>